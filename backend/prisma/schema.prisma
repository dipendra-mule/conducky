// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IncidentState {
  submitted
  acknowledged
  investigating
  resolved
  closed
}

// IncidentType enum removed - replaced with tagging system

enum CommentVisibility {
  public      // visible to all involved (reporter, responders, admins)
  internal    // visible only to responders/admins
}

enum IncidentSeverity {
  low
  medium
  high
  critical
}

// ContactPreference enum removed - contact preference field removed entirely

enum NotificationType {
  incident_submitted      // New incident submitted
  incident_assigned       // Incident assigned to user
  incident_status_changed // Incident status changed
  incident_comment_added  // New comment on incident
  event_invitation        // Invited to event
  event_role_changed      // Role changed in event
  system_announcement     // System-wide announcement
}

enum NotificationPriority {
  low
  normal
  high
  urgent
}

enum SocialProvider {
  google
  github
}

enum OrganizationRole {
  org_admin
  org_viewer
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  passwordHash   String? // Optional for social login users
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  incidents      Incident[] @relation("ReporterIncidents")
  auditLogs      AuditLog[]
  incidentComments IncidentComment[]
  relatedFilesUploaded RelatedFile[] @relation("EvidenceFileUploader")
  assignedIncidents Incident[] @relation("AssignedResponder")
  avatar         UserAvatar?
  passwordResetTokens PasswordResetToken[]
  notifications  Notification[]
  socialAccounts SocialAccount[]
  notificationSettings UserNotificationSettings?
  createdOrganizations Organization[] @relation("OrganizationCreator")
  createdOrgInvites OrganizationInviteLink[] @relation("OrganizationInviteCreator")
  // Unified role system relations
  userRoles      UserRole[]
  grantedRoles   UserRole[] @relation("RoleGranter")
}

model Event {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  website        String?
  codeOfConduct  String?
  contactEmail   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String?  // Nullable initially for migration
  organization   Organization? @relation(fields: [organizationId], references: [id])
  incidents      Incident[]
  auditLogs      AuditLog[]
  inviteLinks    EventInviteLink[]
  eventLogo      EventLogo?
  notifications  Notification[]
  tags           Tag[] // Tagging system
}

// Legacy Role and UserEventRole models removed - using unified RBAC system

model Incident {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  reporter    User?    @relation("ReporterIncidents", fields: [reporterId], references: [id])
  reporterId  String?
  // type field removed - replaced with tagging system
  title       String   @db.VarChar(70) // required, max 70 chars
  description String
  state       IncidentState   // submitted, acknowledged, investigating, resolved, closed
  incidentAt  DateTime? // date and time of the incident (optional)
  parties     String?   // comma-separated or freeform list of parties involved (optional)
  location    String?   // location where the incident occurred (optional)
  // contactPreference field removed entirely
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    IncidentComment[]
  relatedFiles RelatedFile[]
  assignedResponderId String?
  assignedResponder   User?    @relation("AssignedResponder", fields: [assignedResponderId], references: [id])
  severity            IncidentSeverity?
  resolution          String?
  notifications Notification[]
  tags        IncidentTag[] // New tagging system

  // Database indexes for query performance
  @@index([eventId])                           // Event-based queries
  @@index([reporterId])                        // Reporter-based queries  
  @@index([assignedResponderId])               // Assigned incidents queries
  @@index([state])                             // Status filtering
  @@index([severity])                          // Severity filtering
  @@index([createdAt])                         // Time-based sorting
  @@index([updatedAt])                         // Last updated sorting
  @@index([eventId, state])                    // Event incidents by status
  @@index([eventId, reporterId])               // User's incidents in event
  @@index([eventId, createdAt])                // Event incidents by time
  @@index([reporterId, state])                 // User's incidents by status
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#3B82F6")
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  incidents IncidentTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([eventId, name])
  @@index([eventId])
}

model IncidentTag {
  id         String   @id @default(uuid())
  incidentId String
  incident   Incident @relation(fields: [incidentId], references: [id])
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id])
  createdAt  DateTime @default(now())
  
  @@unique([incidentId, tagId])
  @@index([incidentId])
  @@index([tagId])
}

model AuditLog {
  id         String   @id @default(uuid())
  event      Event?   @relation(fields: [eventId], references: [id])
  eventId    String?
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  targetType String
  targetId   String
  timestamp  DateTime @default(now())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model EventInviteLink {
  id              String      @id @default(uuid())
  eventId         String
  event           Event       @relation(fields: [eventId], references: [id])
  code            String      @unique
  createdByUserId String
  createdAt       DateTime    @default(now())
  expiresAt       DateTime?
  maxUses         Int?
  useCount        Int         @default(0)
  disabled        Boolean     @default(false)
  note            String?
  roleId          String
  role            UnifiedRole @relation(fields: [roleId], references: [id])
}

model IncidentComment {
  id         String   @id @default(uuid())
  incident   Incident @relation(fields: [incidentId], references: [id])
  incidentId String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  body       String
  isMarkdown Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visibility CommentVisibility @default(public)
}

model RelatedFile {
  id        String   @id @default(uuid())
  incident  Incident @relation(fields: [incidentId], references: [id])
  incidentId String
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
  uploader   User?   @relation("EvidenceFileUploader", fields: [uploaderId], references: [id])
  uploaderId String?
}

model EventLogo {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
}

model UserAvatar {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
}

model SystemSetting {
  id    String @id @default(uuid())
  key   String @unique
  value String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  priority  NotificationPriority @default(normal)
  title     String
  message   String
  isRead    Boolean  @default(false)
  readAt    DateTime?
  
  // Optional references to related entities
  eventId    String?
  event      Event?    @relation(fields: [eventId], references: [id])
  incidentId String?
  incident   Incident? @relation(fields: [incidentId], references: [id])
  
  // Optional action data (JSON for flexibility)
  actionData String? // JSON string for action-specific data
  actionUrl  String? // URL to navigate to when notification is clicked
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialAccount {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  provider     SocialProvider
  providerId   String        // The user's ID from the OAuth provider
  providerEmail String?      // Email from the OAuth provider
  providerName String?       // Name from the OAuth provider
  profileData  String?       // JSON string for basic profile data (no sensitive tokens)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@unique([provider, providerId])
  @@unique([userId, provider])
}

model RateLimitAttempt {
  id         String   @id @default(uuid())
  key        String   // Rate limit key (e.g., "reset_attempt_email@example.com")
  type       String   // Type of rate limit (e.g., "password_reset", "login_attempt")
  identifier String   // The identifier being rate limited (email, IP, etc.)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  @@index([key, type])
  @@index([expiresAt])
}

model UserNotificationSettings {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  incidentSubmittedInApp   Boolean @default(true)
  incidentSubmittedEmail   Boolean @default(false)
  incidentAssignedInApp    Boolean @default(true)
  incidentAssignedEmail    Boolean @default(false)
  incidentStatusChangedInApp Boolean @default(true)
  incidentStatusChangedEmail Boolean @default(false)
  incidentCommentAddedInApp Boolean @default(true)
  incidentCommentAddedEmail Boolean @default(false)
  eventInvitationInApp   Boolean @default(true)
  eventInvitationEmail   Boolean @default(false)
  eventRoleChangedInApp  Boolean @default(true)
  eventRoleChangedEmail  Boolean @default(false)
  systemAnnouncementInApp Boolean @default(true)
  systemAnnouncementEmail Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Unified Role System Models
enum RoleScope {
  system
  organization  
  event
}

model UnifiedRole {
  id          String    @id @default(uuid())
  name        String    @unique // system_admin, org_admin, org_viewer, event_admin, responder, reporter
  scope       RoleScope
  level       Int       // Hierarchy level (higher = more permissions)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userRoles   UserRole[]
  eventInviteLinks EventInviteLink[]
}

model UserRole {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        UnifiedRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId      String
  scopeType   RoleScope   // system, organization, event
  scopeId     String      // 'SYSTEM' for system, org_id for org, event_id for event
  grantedBy   User?       @relation("RoleGranter", fields: [grantedById], references: [id])
  grantedById String?
  grantedAt   DateTime    @default(now())
  expiresAt   DateTime?   // Optional expiration
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([userId, roleId, scopeType, scopeId], name: "user_role_unique")
  @@index([userId, scopeType, scopeId])
  @@index([scopeType, scopeId])
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  logoUrl     String?
  settings    String?  // JSON string for flexible settings
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("OrganizationCreator", fields: [createdById], references: [id])
  createdById String
  
  // Relationships
  events      Event[]
  auditLogs   AuditLog[]
  logo        OrganizationLogo?
  inviteLinks OrganizationInviteLink[]
}

// Legacy OrganizationMembership model removed - using unified RBAC system

model OrganizationLogo {
  id             String       @id @default(uuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique
  filename       String
  mimetype       String
  size           Int
  data           Bytes
  createdAt      DateTime     @default(now())
}

model OrganizationInviteLink {
  id               String           @id @default(uuid())
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String
  code             String           @unique
  createdByUserId  String
  createdBy        User             @relation("OrganizationInviteCreator", fields: [createdByUserId], references: [id])
  createdAt        DateTime         @default(now())
  expiresAt        DateTime?
  maxUses          Int?
  useCount         Int              @default(0)
  disabled         Boolean          @default(false)
  note             String?
  role             OrganizationRole
}

model RateLimit {
  id          Int      @id @default(autoincrement())
  identifier  String   // IP address or user ID
  endpoint    String   // API endpoint being rate limited
  attempts    Int      @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([identifier, endpoint, windowStart])
  @@index([identifier, endpoint])
  @@index([windowStart])
}
