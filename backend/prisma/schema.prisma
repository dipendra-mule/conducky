// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportState {
  submitted
  acknowledged
  investigating
  resolved
  closed
}

enum ReportType {
  harassment
  safety
  other
}

enum CommentVisibility {
  public      // visible to all involved (reporter, responders, admins)
  internal    // visible only to responders/admins
}

enum ReportSeverity {
  low
  medium
  high
  critical
}

enum ContactPreference {
  email
  phone
  in_person
  no_contact
}

enum NotificationType {
  report_submitted      // New report submitted
  report_assigned       // Report assigned to user
  report_status_changed // Report status changed
  report_comment_added  // New comment on report
  event_invitation      // Invited to event
  event_role_changed    // Role changed in event
  system_announcement   // System-wide announcement
}

enum NotificationPriority {
  low
  normal
  high
  urgent
}

enum SocialProvider {
  google
  github
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  passwordHash   String? // Optional for social login users
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userEventRoles UserEventRole[]
  reports        Report[] @relation("ReporterReports")
  auditLogs      AuditLog[]
  reportComments ReportComment[]
  evidenceFilesUploaded EvidenceFile[] @relation("EvidenceFileUploader")
  assignedReports Report[] @relation("AssignedResponder")
  avatar         UserAvatar?
  passwordResetTokens PasswordResetToken[]
  notifications  Notification[]
  socialAccounts SocialAccount[]
}

model Event {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  description    String?
  startDate      DateTime?
  endDate        DateTime?
  website        String?
  codeOfConduct  String?
  contactEmail   String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userEventRoles UserEventRole[]
  reports        Report[]
  auditLogs      AuditLog[]
  inviteLinks    EventInviteLink[]
  eventLogo      EventLogo?
  notifications  Notification[]
}

model Role {
  id   String @id @default(uuid())
  name String @unique // e.g., Reporter, Responder, Admin, SuperAdmin
  userEventRoles UserEventRole[]
  eventInviteLinks EventInviteLink[]
}

model UserEventRole {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event? @relation(fields: [eventId], references: [id])
  eventId String?
  role    Role   @relation(fields: [roleId], references: [id])
  roleId  String
  @@unique([userId, eventId, roleId])
}

model Report {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  reporter    User?    @relation("ReporterReports", fields: [reporterId], references: [id])
  reporterId  String?
  type        ReportType
  title       String   @db.VarChar(70) // required, max 70 chars
  description String
  state       ReportState   // submitted, acknowledged, investigating, resolved, closed
  incidentAt  DateTime? // date and time of the incident (optional)
  parties     String?   // comma-separated or freeform list of parties involved (optional)
  location    String?   // location where the incident occurred (optional)
  contactPreference ContactPreference @default(email) // preferred contact method
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    ReportComment[]
  evidenceFiles EvidenceFile[]
  assignedResponderId String?
  assignedResponder   User?    @relation("AssignedResponder", fields: [assignedResponderId], references: [id])
  severity            ReportSeverity?
  resolution          String?
  notifications Notification[]
}

model AuditLog {
  id         String   @id @default(uuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  targetType String
  targetId   String
  timestamp  DateTime @default(now())
}

model EventInviteLink {
  id              String   @id @default(uuid())
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id])
  code            String   @unique
  createdByUserId String
  createdAt       DateTime @default(now())
  expiresAt       DateTime?
  maxUses         Int?
  useCount        Int      @default(0)
  disabled        Boolean  @default(false)
  note            String?
  roleId          String
  role            Role     @relation(fields: [roleId], references: [id])
}

model ReportComment {
  id         String   @id @default(uuid())
  report     Report   @relation(fields: [reportId], references: [id])
  reportId   String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  body       String
  isMarkdown Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visibility CommentVisibility @default(public)
}

model EvidenceFile {
  id        String   @id @default(uuid())
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
  uploader   User?   @relation("EvidenceFileUploader", fields: [uploaderId], references: [id])
  uploaderId String?
}

model EventLogo {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @unique
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
}

model UserAvatar {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  filename  String
  mimetype  String
  size      Int
  data      Bytes
  createdAt DateTime @default(now())
}

model SystemSetting {
  id    String @id @default(uuid())
  key   String @unique
  value String
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  priority  NotificationPriority @default(normal)
  title     String
  message   String
  isRead    Boolean  @default(false)
  readAt    DateTime?
  
  // Optional references to related entities
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  reportId  String?
  report    Report?  @relation(fields: [reportId], references: [id])
  
  // Optional action data (JSON for flexibility)
  actionData String? // JSON string for action-specific data
  actionUrl  String? // URL to navigate to when notification is clicked
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SocialAccount {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  provider     SocialProvider
  providerId   String        // The user's ID from the OAuth provider
  providerEmail String?      // Email from the OAuth provider
  providerName String?       // Name from the OAuth provider
  profileData  String?       // JSON string for basic profile data (no sensitive tokens)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@unique([provider, providerId])
  @@unique([userId, provider])
}
