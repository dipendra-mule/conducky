// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ReportState {
  submitted
  acknowledged
  investigating
  resolved
  closed
}

enum ReportType {
  harassment
  safety
  other
}

enum CommentVisibility {
  public      // visible to all involved (reporter, responders, admins)
  internal    // visible only to responders/admins
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  passwordHash   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userEventRoles UserEventRole[]
  reports        Report[] @relation("ReporterReports")
  auditLogs      AuditLog[]
  reportComments ReportComment[]
}

model Event {
  id             String   @id @default(uuid())
  name           String
  slug           String   @unique
  description    String?
  logo           String?
  startDate      DateTime?
  endDate        DateTime?
  website        String?
  codeOfConduct  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userEventRoles UserEventRole[]
  reports        Report[]
  auditLogs      AuditLog[]
  inviteLinks    EventInviteLink[]
}

model Role {
  id   String @id @default(uuid())
  name String @unique // e.g., Reporter, Responder, Admin, SuperAdmin
  userEventRoles UserEventRole[]
  eventInviteLinks EventInviteLink[]
}

model UserEventRole {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event? @relation(fields: [eventId], references: [id])
  eventId String?
  role    Role   @relation(fields: [roleId], references: [id])
  roleId  String
  @@unique([userId, eventId, roleId])
}

model Report {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  reporter    User?    @relation("ReporterReports", fields: [reporterId], references: [id])
  reporterId  String?
  type        ReportType
  description String
  state       ReportState   // submitted, acknowledged, investigating, resolved, closed
  evidence    String?  // file path of uploaded evidence (optional)
  incidentAt  DateTime? // date and time of the incident (optional)
  parties     String?   // comma-separated or freeform list of parties involved (optional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    ReportComment[]
  // Add more fields as needed (e.g., involved parties)
}

model AuditLog {
  id         String   @id @default(uuid())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  targetType String
  targetId   String
  timestamp  DateTime @default(now())
}

model EventInviteLink {
  id              String   @id @default(uuid())
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id])
  code            String   @unique
  createdByUserId String
  createdAt       DateTime @default(now())
  expiresAt       DateTime?
  maxUses         Int?
  useCount        Int      @default(0)
  disabled        Boolean  @default(false)
  note            String?
  roleId          String
  role            Role     @relation(fields: [roleId], references: [id])
}

model ReportComment {
  id         String   @id @default(uuid())
  report     Report   @relation(fields: [reportId], references: [id])
  reportId   String
  author     User?    @relation(fields: [authorId], references: [id])
  authorId   String?
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  visibility CommentVisibility @default(public)
}
